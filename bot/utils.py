import aiohttp
import ssl
import logging
import random
import asyncio
from typing import Optional, Dict, Any
from telegram import Bot
from telegram.error import TelegramError
from .user_settings import UserSettings
from .user_generator import UserGenerator

logger = logging.getLogger(__name__)

def translate_gender(gender):
    return "–ñ–µ–Ω—Å–∫–∏–π" if gender == "female" else "–ú—É–∂—Å–∫–æ–π"

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown."""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

async def get_random_user(settings: UserSettings = None) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    try:
        if settings is None:
            settings = UserSettings.get_default_settings(0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        nationality = random.choice(settings.nationality) if settings.nationality else random.choice(UserGenerator.get_available_countries())

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = UserGenerator.generate_user(
            country_code=nationality,
            gender=settings.gender,
            password_settings=settings.password_settings
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_data = {
            "results": [{
                "name": {
                    "first": user_data.get("first_name", ""),
                    "last": user_data.get("last_name", "")
                },
                "gender": user_data.get("gender", ""),
                "location": {
                    "street": {
                        "name": user_data.get("address", "").split(",")[0] if "," in user_data.get("address", "") else "",
                        "number": ""
                    },
                    "city": user_data.get("address", "").split(",")[1].strip() if "," in user_data.get("address", "") else "",
                    "country": user_data.get("country", "")
                },
                "email": user_data.get("email", ""),
                "login": user_data.get("login", {}),
                "phone": user_data.get("phone", ""),
                "cell": user_data.get("phone", ""),
                "dob": {
                    "date": user_data.get("birth_date", ""),
                    "age": user_data.get("age", 0)
                },
                "physical": user_data.get("physical", {}),
                "education": user_data.get("education", {}),
                "occupation": user_data.get("occupation", ""),
                "languages": user_data.get("languages", []),
                "hobbies": user_data.get("hobbies", []),
                "marital_status": user_data.get("marital_status", ""),
                "social_media": user_data.get("social_media", {})
            }]
        }
        
        return formatted_data
    except Exception as e:
        logger.error(f"Error in get_random_user: {str(e)}")
        raise

async def format_user_data(user_data):
    user = user_data['results'][0]
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞)
    formatted_data = []
    
    if 'name' in user:
        name = f"{user['name']['first']} {user['name']['last']}"
        name_data = [
            "üë§ *–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*",
            f"–§–ò–û: `{name}`"
        ]
        if 'gender' in user:
            name_data.append(f"–ü–æ–ª: `{translate_gender(user['gender'])}`")
        if 'dob' in user:
            name_data.append(f"–í–æ–∑—Ä–∞—Å—Ç: `{user['dob']['age']} –ª–µ—Ç`")
            if 'date' in user['dob']:
                birth_date = user['dob']['date'].split('T')[0] if 'T' in user['dob']['date'] else user['dob']['date']
                name_data.append(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: `{birth_date}`")
        formatted_data.append('\n'.join(name_data))
    
    # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    if 'physical' in user:
        physical_data = [
            "üí™ *–§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:*",
            f"–†–æ—Å—Ç: `{user['physical']['height']} —Å–º`",
            f"–í–µ—Å: `{user['physical']['weight']} –∫–≥`",
            f"–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: `{user['physical']['blood_type']}`"
        ]
        formatted_data.append('\n'.join(physical_data))

    # –ê–¥—Ä–µ—Å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if 'location' in user:
        location_data = [
            "üìç *–ê–¥—Ä–µ—Å:*",
            f"–°—Ç—Ä–∞–Ω–∞: `{user['location']['country']}`",
            f"–ì–æ—Ä–æ–¥: `{user['location']['city']}`",
            f"–£–ª–∏—Ü–∞: `{user['location']['street']['name']}`"
        ]
        formatted_data.append('\n'.join(location_data))
    
    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    if 'education' in user:
        education_data = [
            "üéì *–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:*",
            f"–£—Ä–æ–≤–µ–Ω—å: `{user['education']['level']}`",
            f"–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: `{user['education']['university']}`",
            f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: `{user['education']['graduation_year']}`"
        ]
        formatted_data.append('\n'.join(education_data))

    # –†–∞–±–æ—Ç–∞
    if 'occupation' in user:
        occupation_data = [
            "üíº *–†–∞–±–æ—Ç–∞:*",
            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: `{user['occupation']}`"
        ]
        formatted_data.append('\n'.join(occupation_data))

    # –Ø–∑—ã–∫–∏ –∏ —Ö–æ–±–±–∏
    languages_hobbies_data = []
    if 'languages' in user:
        languages_str = "`, `".join(user['languages'])
        languages_hobbies_data.append(f"–Ø–∑—ã–∫–∏: `{languages_str}`")
    if 'hobbies' in user:
        hobbies_str = "`, `".join(user['hobbies'])
        languages_hobbies_data.append(f"–•–æ–±–±–∏: `{hobbies_str}`")
    if languages_hobbies_data:
        formatted_data.append("üåç *–Ø–∑—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:*\n" + "\n".join(languages_hobbies_data))

    # –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if 'marital_status' in user:
        marital_data = [
            "üíë *–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:*",
            f"–°—Ç–∞—Ç—É—Å: `{user['marital_status']}`"
        ]
        formatted_data.append('\n'.join(marital_data))

    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    contact_data = []
    if any(key in user for key in ['email', 'phone', 'cell']):
        contact_data.append("üì± *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*")
        if 'email' in user:
            contact_data.append(f"Email: `{user['email']}`")
        if 'phone' in user:
            contact_data.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: `{user['phone']}`")
        if 'cell' in user:
            contact_data.append(f"–ú–æ–±–∏–ª—å–Ω—ã–π: `{user['cell']}`")
        formatted_data.append('\n'.join(contact_data))
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    if 'social_media' in user:
        social_data = ["üåê *–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:*"]
        for platform, username in user['social_media'].items():
            social_data.append(f"{platform}: `{username}`")
        formatted_data.append('\n'.join(social_data))

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
    if 'login' in user:
        login_data = [
            "üîê *–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:*",
            f"–õ–æ–≥–∏–Ω: `{user['login']['username']}`",
            f"–ü–∞—Ä–æ–ª—å: `{user['login']['password']}`"
        ]
        formatted_data.append('\n'.join(login_data))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    return '\n\n'.join(formatted_data)

async def check_subscription(bot: Bot, user_id: int, channel_id: str) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except TelegramError:
        return False

async def broadcast_message(bot: Bot, users, message: str):
    failed_users = []
    logger.info(f"Starting broadcast to {len(users) if users else 0} users")
    
    if not users:
        logger.warning("No users to broadcast to!")
        return failed_users
        
    for i, user in enumerate(users, 1):
        try:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ user
            telegram_id = user.telegram_id if hasattr(user, 'telegram_id') else user[0]
            logger.info(f"Sending message to user {telegram_id} ({i}/{len(users)})")
            
            await bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode='Markdown'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown
            )
            logger.info(f"Successfully sent message to user {telegram_id}")
            await asyncio.sleep(0.05)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            
        except TelegramError as e:
            logger.error(f"Telegram error while sending to user {telegram_id}: {str(e)}")
            failed_users.append(user)
        except Exception as e:
            logger.error(f"Unexpected error while sending to user {telegram_id}: {str(e)}")
            failed_users.append(user)
            
    logger.info(f"Broadcast completed. Failed: {len(failed_users)}/{len(users)}")
    return failed_users

def format_settings(settings):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    formatted = []
    
    # –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    nations = ", ".join(settings.nationality) if settings.nationality else "–í—Å–µ"
    formatted.append(f"üåç *–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:* {nations}")
    
    # –ü–æ–ª
    gender = translate_gender(settings.gender) if settings.gender else "–õ—é–±–æ–π"
    formatted.append(f"üë• *–ü–æ–ª:* {gender}")
    
    # –ü–æ–ª—è –¥–∞–Ω–Ω—ã—Ö
    fields = ", ".join(settings.include_fields) if settings.include_fields else "–í—Å–µ"
    formatted.append(f"üìã *–ü–æ–ª—è –¥–∞–Ω–Ω—ã—Ö:* {fields}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    formatted.append(f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:* {settings.results_count}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è
    if settings.password_settings:
        pass_settings = []
        for setting in settings.password_settings.split(","):
            if setting == "lower":
                pass_settings.append("—Å—Ç—Ä–æ—á–Ω—ã–µ")
            elif setting == "upper":
                pass_settings.append("–ø—Ä–æ–ø–∏—Å–Ω—ã–µ")
            elif setting == "number":
                pass_settings.append("—Ü–∏—Ñ—Ä—ã")
            elif setting == "special":
                pass_settings.append("—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
            elif "-" in setting:
                min_len, max_len = setting.split("-")
                pass_settings.append(f"–¥–ª–∏–Ω–∞ {min_len}-{max_len}")
            else:
                try:
                    length = int(setting)
                    pass_settings.append(f"–¥–ª–∏–Ω–∞ {length}")
                except ValueError:
                    pass
        formatted.append(f"üîê *–ü–∞—Ä–æ–ª—å:* {', '.join(pass_settings)}")
    else:
        formatted.append("üîê *–ü–∞—Ä–æ–ª—å:* —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    return "\n".join(formatted) 