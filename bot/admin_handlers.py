from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
import csv
import io
from datetime import datetime
import logging
import asyncio
from typing import Optional, Dict
from .database import Database
from .config import ADMIN_IDS

logger = logging.getLogger(__name__)
db = Database('bot.db')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
active_broadcasts: Dict[int, bool] = {}

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    logger.info(f"Admin menu accessed by user {user_id}. Admin IDs: {ADMIN_IDS}")
    
    if user_id not in ADMIN_IDS:
        logger.warning(f"Access denied for user {user_id}")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_stats')],
        [InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)", callback_data='export_users')],
        [InlineKeyboardButton("üì® –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='broadcast_message')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup, parse_mode='Markdown')

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        return
        
    logger.info(f"Admin callback received: {query.data} from user {user_id}")
    await query.answer()

    if query.data == 'admin_stats':
        try:
            users = db.get_all_users()
            users_count = len(users)
            logger.info(f"Got users count: {users_count}")
            
            stats_text = (
                "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{users_count}`\n"
            )
            await query.edit_message_text(stats_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error getting stats: {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                parse_mode='Markdown'
            )

    elif query.data == 'export_users':
        try:
            users = db.get_all_users()
            logger.info(f"Exporting {len(users)} users")
            
            if not users:
                await query.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
                return

            # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            writer = csv.writer(output)
            writer.writerow(['ID', 'Username'])
            
            for user in users:
                writer.writerow([user[0], user[1]])
            
            output.seek(0)
            file_content = output.getvalue().encode()
            output.close()
            
            filename = f'users_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
            logger.info(f"Sending CSV file: {filename}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await context.bot.send_document(
                chat_id=user_id,
                document=io.BytesIO(file_content),
                filename=filename,
                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
            await query.edit_message_text("‚úÖ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"Error exporting users: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    elif query.data == 'broadcast_message':
        try:
            context.user_data['waiting_for_broadcast'] = True
            await query.edit_message_text(
                "*üì® –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown.\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error starting broadcast: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    
    if not context.user_data.get('waiting_for_broadcast'):
        logger.debug(f"Ignoring message from {user_id}: not waiting for broadcast")
        return

    if user_id not in ADMIN_IDS:
        logger.warning(f"Access denied for user {user_id}")
        return

    try:
        context.user_data['waiting_for_broadcast'] = False
        message_text = update.message.text
        logger.info(f"Received broadcast message from admin {user_id}: {message_text[:50]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ context.user_data
        context.user_data['broadcast_message'] = {
            'text': message_text,
            'parse_mode': 'Markdown'
        }

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_broadcast'),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_broadcast')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        preview_text = (
            "*üì® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
            f"{message_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(preview_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error handling broadcast message: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        context.user_data['waiting_for_broadcast'] = False

async def broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        return
        
    logger.info(f"Broadcast callback received: {query.data} from user {user_id}")
    await query.answer()

    if query.data == 'cancel_broadcast':
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    if query.data == 'confirm_broadcast':
        try:
            broadcast_data = context.user_data.get('broadcast_message')
            if not broadcast_data:
                logger.error("No broadcast message found in context")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.get_all_users()
            if not users:
                await query.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                return

            total_users = len(users)
            sent_count = 0
            failed_count = 0
            failed_users = []

            logger.info(f"Starting broadcast to {total_users} users")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            active_broadcasts[user_id] = True

            status_message = await query.message.reply_text(
                "üì® –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞...\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total_users}\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel_broadcast"
            )

            batch_size = 25  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            last_update_time = datetime.now()

            for i, user in enumerate(users, 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞
                if not active_broadcasts.get(user_id):
                    logger.info("Broadcast was cancelled by admin")
                    await status_message.edit_text("üõë –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                    return

                try:
                    await context.bot.send_message(
                        chat_id=user[0],  # telegram_id
                        text=broadcast_data['text'],
                        parse_mode=broadcast_data['parse_mode']
                    )
                    sent_count += 1
                    logger.debug(f"Message sent to user {user[0]}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.05)  # 50ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                except Exception as e:
                    failed_count += 1
                    failed_users.append(user[0])
                    logger.error(f"Failed to send broadcast to user {user[0]}: {str(e)}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ batch_size —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                current_time = datetime.now()
                if i % batch_size == 0 or (current_time - last_update_time).seconds >= 3:
                    try:
                        await status_message.edit_text(
                            "üì® –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞...\n"
                            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_users}\n"
                            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                        )
                        last_update_time = current_time
                    except Exception as e:
                        logger.error(f"Failed to update status message: {str(e)}")

            # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            active_broadcasts.pop(user_id, None)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            try:
                db.save_broadcast_results(
                    admin_id=user_id,
                    timestamp=timestamp,
                    total_users=total_users,
                    sent_count=sent_count,
                    failed_count=failed_count,
                    failed_users=failed_users
                )
                logger.info(f"Broadcast results saved: sent={sent_count}, failed={failed_count}")
            except Exception as e:
                logger.error(f"Failed to save broadcast results: {str(e)}")

            result_text = (
                "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"- –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed_count}\n\n"
                f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ({timestamp})"
            )
            await status_message.edit_text(result_text)
        except Exception as e:
            logger.error(f"Error during broadcast: {e}", exc_info=True)
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        return

    if context.user_data.get('waiting_for_broadcast'):
        context.user_data['waiting_for_broadcast'] = False
        logger.info(f"Broadcast creation cancelled by admin {user_id}")
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def cancel_broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É."""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        return

    if user_id in active_broadcasts:
        active_broadcasts[user_id] = False
        logger.info(f"Active broadcast cancelled by admin {user_id}")
        await update.message.reply_text("üõë –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

def register_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    application.add_handler(CommandHandler("admin", admin_menu))
    application.add_handler(CallbackQueryHandler(admin_callback, pattern='^(admin_stats|export_users|broadcast_message)$'))
    application.add_handler(CallbackQueryHandler(broadcast_callback, pattern='^(confirm_broadcast|cancel_broadcast)$'))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(CommandHandler("cancel_broadcast", cancel_broadcast_command)) 