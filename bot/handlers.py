from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
import logging
import traceback
import json
import io
from datetime import datetime

from .database import User, Settings, init_db, get_session_maker
from .keyboards import get_main_keyboard
from .utils import get_random_user, format_user_data, broadcast_message, translate_gender, format_settings
from .database import Database
from .user_settings import UserSettings, DEFAULT_SETTINGS
from .settings_keyboards import (
    get_settings_keyboard, get_gender_keyboard,
    get_nationality_keyboard, get_password_settings_keyboard,
    get_fields_keyboard, get_results_count_keyboard
)
from .admin_handlers import admin_menu

logger = logging.getLogger(__name__)

db = Database('bot.db')

async def get_session_maker_from_context(context):
    """Get or create session maker from context."""
    if 'session_maker' not in context.bot_data:
        engine = await init_db()
        session_maker = await get_session_maker(engine)
        context.bot_data['session_maker'] = session_maker
        logger.info("Database initialized")
    return context.bot_data['session_maker']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /start command."""
    try:
        if not update or not update.effective_user:
            logger.error("No update or user object")
            return

        user = update.effective_user
        logger.info(f"Start command from user: {user.id} (@{user.username})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user.id, user.username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "üé≤ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚öôÔ∏è –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings\n"
            "‚ùì –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
            reply_markup=get_main_keyboard(user.id in context.bot_data.get('admin_ids', []))
        )
        logger.debug("Welcome message sent")

    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        logger.error(traceback.format_exc())
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /generate."""
    user_id = update.effective_user.id
    settings = db.get_user_settings(user_id)
    
    try:
        user_data = await get_random_user(settings)
        if settings.results_count > 1:
            for user in user_data['results']:
                formatted_data = await format_user_data({'results': [user]})
                await update.message.reply_text(formatted_data, parse_mode='Markdown')
        else:
            formatted_data = await format_user_data(user_data)
            await update.message.reply_text(formatted_data, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error in generate command: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def generatejson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /generatejson. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
    user_id = update.effective_user.id
    settings = db.get_user_settings(user_id)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        all_results = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
        for _ in range(settings.results_count):
            user_data = await get_random_user(settings)
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            all_results.extend(user_data['results'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π JSON —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        json_data = json.dumps({
            'count': len(all_results),
            'results': all_results
        }, ensure_ascii=False, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_document(
            document=io.StringIO(json_data),
            filename='user_data.json',
            caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_results)}"
        )
    except Exception as e:
        logger.error(f"Error in generatejson command: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def admin_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in context.bot_data['admin_ids']:
        return
    
    session_maker = await get_session_maker_from_context(context)
    async with session_maker() as session:
        async with session.begin():
            result = await session.execute(select(User))
            users = result.scalars().all()
    
        users_text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            users_text += f"ID: {user.telegram_id}\nUsername: @{user.username}\nAdmin: {'–î–∞' if user.is_admin else '–ù–µ—Ç'}\n\n"
    
        await update.message.reply_text(users_text)

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    user = update.effective_user
    logger.info(f"Admin broadcast initiated by user {user.id}")
    
    if user.id not in context.bot_data.get('admin_ids', []):
        logger.warning(f"Unauthorized broadcast attempt by user {user.id}")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback query
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>"
        )
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
    if not context.args or len(context.args) == 0:
        logger.info("Broadcast command received without message")
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>"
        )
        return
    
    message = ' '.join(context.args)
    logger.info(f"Broadcasting message: {message[:50]}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Database –∫–ª–∞—Å—Å
        logger.info("Fetching users from database...")
        users = db.get_all_users()
        
        if not users:
            logger.warning("No users found in database for broadcast")
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
            
        logger.info(f"Starting broadcast to {len(users)} users")
        await update.message.reply_text(f"üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        failed_users = await broadcast_message(context.bot, users, message)
        
        status = "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        if failed_users:
            status += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {len(failed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(users)}"
        else:
            status += f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ({len(users)})"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        try:
            logger.info("Saving broadcast results...")
            db.save_broadcast_results(
                admin_id=user.id,
                timestamp=timestamp,
                total_users=len(users),
                sent_count=len(users) - len(failed_users),
                failed_count=len(failed_users),
                failed_users=[u[0] if isinstance(u, tuple) else u.telegram_id for u in failed_users]
            )
            status += f"\n\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ({timestamp})"
            logger.info("Broadcast results saved successfully")
        except Exception as e:
            logger.error(f"Failed to save broadcast results: {str(e)}")
            status += "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏"
        
        logger.info(f"Broadcast completed. Status: {status}")
        await update.message.reply_text(status)
        
    except Exception as e:
        error_msg = f"Error in broadcast: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
        "/generatejson - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON-—Ñ–∞–π–ª–∞\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
        "   - –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n"
        "   - –ü–æ–ª\n"
        "   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è\n"
        "   - –í—ã–±–æ—Ä –ø–æ–ª–µ–π\n"
        "   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±–æ–∏—Ö –ø–æ–ª–æ–≤ "
        "–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–∞–Ω–Ω—ã—Ö.",
        parse_mode='Markdown'
    )

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    settings = db.get_user_settings(user_id)
    formatted_settings = format_settings(settings)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['settings'] = settings.__dict__
    
    await update.message.reply_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*\n\n"
        f"{formatted_settings}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard(context),
        parse_mode='Markdown'
    )

async def handle_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    settings = db.get_user_settings(user_id)

    await query.answer()

    if data == "settings_reset":
        settings = UserSettings(user_id)
        for key, value in DEFAULT_SETTINGS.items():
            setattr(settings, key, value)
        db.save_user_settings(settings)
        context.user_data['settings'] = settings.__dict__
        formatted_settings = format_settings(settings)
        await query.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*\n\n"
            f"{formatted_settings}\n\n"
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            reply_markup=get_settings_keyboard(context),
            parse_mode='Markdown'
        )
    
    elif data == "settings_nationality":
        await query.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:\n"
            "(–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n\n"
            "–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: " + (", ".join(settings.nationality) if settings.nationality else "–í—Å–µ"),
            reply_markup=get_nationality_keyboard(settings.nationality)
        )
    
    elif data == "settings_gender":
        await query.message.edit_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
            reply_markup=get_gender_keyboard()
        )
    
    elif data == "settings_password":
        await query.message.edit_text(
            "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è",
            reply_markup=get_password_settings_keyboard()
        )
    
    elif data == "settings_fields":
        await query.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
            reply_markup=get_fields_keyboard(settings.include_fields)
        )
    
    elif data == "settings_count":
        await query.message.edit_text(
            "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
            reply_markup=get_results_count_keyboard()
        )
    
    elif data.startswith("gender_"):
        gender = data.split("_")[1]
        settings.gender = None if gender == "any" else gender
        db.save_user_settings(settings)
        formatted_settings = format_settings(settings)
        await query.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*\n\n"
            f"{formatted_settings}\n\n"
            f"‚úÖ –ü–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {translate_gender(gender) if gender != 'any' else '–õ—é–±–æ–π'}",
            reply_markup=get_settings_keyboard(context),
            parse_mode='Markdown'
        )
    
    elif data.startswith("nat_"):
        nat = data.split("_")[1]
        if settings.nationality is None:
            settings.nationality = []
        if nat in settings.nationality:
            settings.nationality.remove(nat)
        else:
            settings.nationality.append(nat)
        db.save_user_settings(settings)
        await query.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:\n"
            "(–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n\n"
            "–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: " + (", ".join(settings.nationality) if settings.nationality else "–í—Å–µ"),
            reply_markup=get_nationality_keyboard(settings.nationality)
        )
    
    elif data.startswith("field_"):
        field = data.split("_")[1]
        if settings.include_fields is None:
            settings.include_fields = []
        if field in settings.include_fields:
            settings.include_fields.remove(field)
        else:
            settings.include_fields.append(field)
        db.save_user_settings(settings)
        await query.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n"
            f"–¢–µ–∫—É—â–∏–µ –ø–æ–ª—è: {', '.join(settings.include_fields) if settings.include_fields else '–í—Å–µ'}",
            reply_markup=get_fields_keyboard(settings.include_fields)
        )
    
    elif data.startswith("count_"):
        count = int(data.split("_")[1])
        settings.results_count = count
        db.save_user_settings(settings)
        formatted_settings = format_settings(settings)
        await query.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*\n\n"
            f"{formatted_settings}\n\n"
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {count}",
            reply_markup=get_settings_keyboard(context),
            parse_mode='Markdown'
        )
    
    elif data.startswith("pass_"):
        param = data.split("_")[1]
        if param == "length":
            context.user_data['awaiting_password_length'] = True
            await query.message.edit_text(
                "üìè –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: min-max\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 8-16\n\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã",
                reply_markup=None
            )
        else:
            current_settings = settings.password_settings.split(",") if settings.password_settings else []
            if param in current_settings:
                current_settings.remove(param)
            else:
                current_settings.append(param)
            settings.password_settings = ",".join(current_settings) if current_settings else None
            db.save_user_settings(settings)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_settings = []
            for setting in current_settings:
                if setting == "lower":
                    display_settings.append("—Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
                elif setting == "upper":
                    display_settings.append("–ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã")
                elif setting == "number":
                    display_settings.append("—Ü–∏—Ñ—Ä—ã")
                elif setting == "special":
                    display_settings.append("—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
                elif "-" in setting:
                    min_len, max_len = setting.split("-")
                    display_settings.append(f"–¥–ª–∏–Ω–∞ {min_len}-{max_len}")
                elif setting.isdigit():
                    display_settings.append(f"–¥–ª–∏–Ω–∞ {setting}")
            
            current_settings_text = ", ".join(display_settings) if display_settings else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
            
            await query.message.edit_text(
                "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è:\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {current_settings_text}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è:",
                reply_markup=get_password_settings_keyboard()
            )
    
    elif data == "settings_back":
        formatted_settings = format_settings(settings)
        await query.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*\n\n"
            f"{formatted_settings}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_settings_keyboard(context),
            parse_mode='Markdown'
        )
    
    elif data == "settings_save":
        await query.message.edit_text(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "—Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
        )

async def handle_password_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'awaiting_password_length' not in context.user_data:
        return

    text = update.message.text
    user_id = update.effective_user.id
    settings = db.get_user_settings(user_id)
    
    try:
        if '-' in text:
            min_len, max_len = map(int, text.split('-'))
            if min_len > max_len:
                min_len, max_len = max_len, min_len
            if min_len < 1:
                min_len = 1
            if max_len > 128:
                max_len = 128
            length_setting = f"{min_len}-{max_len}"
        else:
            length = int(text)
            if length < 1:
                length = 1
            if length > 128:
                length = 128
            length_setting = str(length)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        current_settings = []
        if settings.password_settings:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            current_settings = [s for s in settings.password_settings.split(",") 
                              if not (s.isdigit() or '-' in s)]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
        if not any(s in ["lower", "upper", "number", "special"] for s in current_settings):
            current_settings.extend(["lower", "upper", "number"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª–∏–Ω—ã
        current_settings.append(length_setting)
        settings.password_settings = ",".join(current_settings)
        
        db.save_user_settings(settings)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if '-' in length_setting:
            min_len, max_len = length_setting.split('-')
            success_msg = f"‚úÖ –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –æ—Ç {min_len} –¥–æ {max_len} —Å–∏–º–≤–æ–ª–æ–≤"
        else:
            success_msg = f"‚úÖ –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {length_setting} —Å–∏–º–≤–æ–ª–æ–≤"
        
        await update.message.reply_text(
            f"{success_msg}\n\n"
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: /settings"
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8-16)\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 1, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: 128"
        )
    
    del context.user_data['awaiting_password_length']

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages."""
    if not update.message or not update.message.text:
        return

    text = update.message.text

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings(update, context)
    elif text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        await admin_users_list(update, context)
    elif text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π":
        await admin_broadcast(update, context)
    elif text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await admin_menu(update, context)
    elif context.user_data.get('awaiting_password_length'):
        await handle_password_length(update, context) 